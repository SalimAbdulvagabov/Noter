//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let entitlements = entitlements()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var image: image { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var font: font { .init(bundle: bundle) }
  var file: file { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func image(bundle: Foundation.Bundle) -> image {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func font(bundle: Foundation.Bundle) -> font {
    .init(bundle: bundle)
  }
  func file(bundle: Foundation.Bundle) -> file {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.font.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localized: localized { .init(source: .init(bundle: bundle, tableName: "Localized", preferredLanguages: preferredLanguages, locale: locale)) }

    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localized(preferredLanguages: [String]) -> localized {
      .init(source: .init(bundle: bundle, tableName: "Localized", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source
    }

    /// This `_R.string.localized` struct is generated, and contains static references to 44 localization keys.
    struct localized {
      let source: RswiftResources.StringResource.Source

      /// Value: Добавьте быстрые команды
      ///
      /// Key: addShortcut
      var addShortcut: RswiftResources.StringResource { .init(key: "addShortcut", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Внешний вид
      ///
      /// Key: apperance
      var apperance: RswiftResources.StringResource { .init(key: "apperance", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Что нового?
      ///
      /// Key: blog
      var blog: RswiftResources.StringResource { .init(key: "blog", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Отменить
      ///
      /// Key: cancel
      var cancel: RswiftResources.StringResource { .init(key: "cancel", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Продолжить
      ///
      /// Key: continue
      var `continue`: RswiftResources.StringResource { .init(key: "continue", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Создать заметку
      ///
      /// Key: createnote
      var createnote: RswiftResources.StringResource { .init(key: "createnote", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Удалить
      ///
      /// Key: delete
      var delete: RswiftResources.StringResource { .init(key: "delete", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Готово
      ///
      /// Key: done
      var done: RswiftResources.StringResource { .init(key: "done", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Время окончания
      ///
      /// Key: endTime
      var endTime: RswiftResources.StringResource { .init(key: "endTime", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Папки
      ///
      /// Key: folders
      var folders: RswiftResources.StringResource { .init(key: "folders", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Записывай мысли, идеи, цитаты, выдержки из книг, а мы будем присылать тебе их в виде уведомлений
      ///
      /// Key: launch.description1
      var launchDescription1: RswiftResources.StringResource { .init(key: "launch.description1", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Мы уже добавили несколько полезных заметок в твой список. Если что, их можно потом удалить
      ///
      /// Key: launch.description2
      var launchDescription2: RswiftResources.StringResource { .init(key: "launch.description2", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Но для того, чтобы уведомления приходили в удобное для тебя время их нужно настроить
      ///
      /// Key: launch.description3
      var launchDescription3: RswiftResources.StringResource { .init(key: "launch.description3", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Настроить уведомления
      ///
      /// Key: launch.setupSettings
      var launchSetupSettings: RswiftResources.StringResource { .init(key: "launch.setupSettings", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Ноутер делает заметки полезнее
      ///
      /// Key: launch.title
      var launchTitle: RswiftResources.StringResource { .init(key: "launch.title", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Создание папки
      ///
      /// Key: newFolder
      var newFolder: RswiftResources.StringResource { .init(key: "newFolder", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Название
      ///
      /// Key: newFolder.name
      var newFolderName: RswiftResources.StringResource { .init(key: "newFolder.name", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Сохранить
      ///
      /// Key: newFolder.save
      var newFolderSave: RswiftResources.StringResource { .init(key: "newFolder.save", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Заметка
      ///
      /// Key: note
      var note: RswiftResources.StringResource { .init(key: "note", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Отменить изменения
      ///
      /// Key: note.cancelChanges
      var noteCancelChanges: RswiftResources.StringResource { .init(key: "note.cancelChanges", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Удалить заметку
      ///
      /// Key: note.delete
      var noteDelete: RswiftResources.StringResource { .init(key: "note.delete", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Название
      ///
      /// Key: note.name
      var noteName: RswiftResources.StringResource { .init(key: "note.name", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Заметка удалена
      ///
      /// Key: noteIsDelete
      var noteIsDelete: RswiftResources.StringResource { .init(key: "noteIsDelete", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Заметка перемещена в папку
      ///
      /// Key: noteMoveInFolder
      var noteMoveInFolder: RswiftResources.StringResource { .init(key: "noteMoveInFolder", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Все заметки
      ///
      /// Key: notes
      var notes: RswiftResources.StringResource { .init(key: "notes", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Загружаем заметки
      ///
      /// Key: notesAreLoading
      var notesAreLoading: RswiftResources.StringResource { .init(key: "notesAreLoading", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Чтобы создать заметку, нажмите на синюю кнопку в самом низу
      ///
      /// Key: notesList.emptyDescription
      var notesListEmptyDescription: RswiftResources.StringResource { .init(key: "notesList.emptyDescription", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Как-то тут пусто
      ///
      /// Key: notesList.emptyTitle
      var notesListEmptyTitle: RswiftResources.StringResource { .init(key: "notesList.emptyTitle", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Уведомления
      ///
      /// Key: notifications
      var notifications: RswiftResources.StringResource { .init(key: "notifications", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Разрешите отправку уведомлений в настройках, чтобы получать напоминания о заметках
      ///
      /// Key: notificationsDisabledDescription
      var notificationsDisabledDescription: RswiftResources.StringResource { .init(key: "notificationsDisabledDescription", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Перейти в настройки
      ///
      /// Key: openSettings
      var openSettings: RswiftResources.StringResource { .init(key: "openSettings", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Периодичность
      ///
      /// Key: periodicity
      var periodicity: RswiftResources.StringResource { .init(key: "periodicity", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Оценить приложение
      ///
      /// Key: rateApp
      var rateApp: RswiftResources.StringResource { .init(key: "rateApp", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Написать разработчикам
      ///
      /// Key: reportProblem
      var reportProblem: RswiftResources.StringResource { .init(key: "reportProblem", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Сохранить настройки
      ///
      /// Key: saveSettings
      var saveSettings: RswiftResources.StringResource { .init(key: "saveSettings", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Настройки
      ///
      /// Key: settings
      var settings: RswiftResources.StringResource { .init(key: "settings", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Показывать уведомления
      ///
      /// Key: showNotifications
      var showNotifications: RswiftResources.StringResource { .init(key: "showNotifications", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Показать случайную заметку
      ///
      /// Key: showRandomNote
      var showRandomNote: RswiftResources.StringResource { .init(key: "showRandomNote", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Быстрые команды
      ///
      /// Key: siriCommands
      var siriCommands: RswiftResources.StringResource { .init(key: "siriCommands", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Быстрые команды Siri позволяют выполнять привычные действия с приложением при помощи голоса
      ///
      /// Key: siriDescription
      var siriDescription: RswiftResources.StringResource { .init(key: "siriDescription", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Пропустить
      ///
      /// Key: skip
      var skip: RswiftResources.StringResource { .init(key: "skip", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Время начала
      ///
      /// Key: startTime
      var startTime: RswiftResources.StringResource { .init(key: "startTime", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Провели работу над ошибками, добавили виджет, а будущие обновления будем выкатывать чаще
      ///
      /// Key: weReturn.description
      var weReturnDescription: RswiftResources.StringResource { .init(key: "weReturn.description", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }

      /// Value: Мы снова в строю!
      ///
      /// Key: weReturn.title
      var weReturnTitle: RswiftResources.StringResource { .init(key: "weReturn.title", tableName: "Localized", source: source, developmentValue: nil, comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 20 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `Berlin`.
    var berlin: RswiftResources.ColorResource { .init(name: "Berlin", path: [], bundle: bundle) }

    /// Color `Blue`.
    var blue: RswiftResources.ColorResource { .init(name: "Blue", path: [], bundle: bundle) }

    /// Color `ButtonBackground`.
    var buttonBackground: RswiftResources.ColorResource { .init(name: "ButtonBackground", path: [], bundle: bundle) }

    /// Color `Cairo`.
    var cairo: RswiftResources.ColorResource { .init(name: "Cairo", path: [], bundle: bundle) }

    /// Color `DarkBorder`.
    var darkBorder: RswiftResources.ColorResource { .init(name: "DarkBorder", path: [], bundle: bundle) }

    /// Color `DeleteView`.
    var deleteView: RswiftResources.ColorResource { .init(name: "DeleteView", path: [], bundle: bundle) }

    /// Color `FolderInputBorder`.
    var folderInputBorder: RswiftResources.ColorResource { .init(name: "FolderInputBorder", path: [], bundle: bundle) }

    /// Color `LightBorder`.
    var lightBorder: RswiftResources.ColorResource { .init(name: "LightBorder", path: [], bundle: bundle) }

    /// Color `Loading`.
    var loading: RswiftResources.ColorResource { .init(name: "Loading", path: [], bundle: bundle) }

    /// Color `London`.
    var london: RswiftResources.ColorResource { .init(name: "London", path: [], bundle: bundle) }

    /// Color `Monaco`.
    var monaco: RswiftResources.ColorResource { .init(name: "Monaco", path: [], bundle: bundle) }

    /// Color `Orange`.
    var orange: RswiftResources.ColorResource { .init(name: "Orange", path: [], bundle: bundle) }

    /// Color `Paris`.
    var paris: RswiftResources.ColorResource { .init(name: "Paris", path: [], bundle: bundle) }

    /// Color `Placeholder`.
    var placeholder: RswiftResources.ColorResource { .init(name: "Placeholder", path: [], bundle: bundle) }

    /// Color `Rome`.
    var rome: RswiftResources.ColorResource { .init(name: "Rome", path: [], bundle: bundle) }

    /// Color `ScreenBackground`.
    var screenBackground: RswiftResources.ColorResource { .init(name: "ScreenBackground", path: [], bundle: bundle) }

    /// Color `ScreenBackgroundInversion`.
    var screenBackgroundInversion: RswiftResources.ColorResource { .init(name: "ScreenBackgroundInversion", path: [], bundle: bundle) }

    /// Color `Separator`.
    var separator: RswiftResources.ColorResource { .init(name: "Separator", path: [], bundle: bundle) }

    /// Color `Text`.
    var text: RswiftResources.ColorResource { .init(name: "Text", path: [], bundle: bundle) }

    /// Color `Tokyo`.
    var tokyo: RswiftResources.ColorResource { .init(name: "Tokyo", path: [], bundle: bundle) }
  }

  /// This `_R.image` struct is generated, and contains static references to 36 images.
  struct image {
    let bundle: Foundation.Bundle

    /// Image `Apperance`.
    var apperance: RswiftResources.ImageResource { .init(name: "Apperance", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ArrowRightIcon`.
    var arrowRightIcon: RswiftResources.ImageResource { .init(name: "ArrowRightIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BackArrowIcon`.
    var backArrowIcon: RswiftResources.ImageResource { .init(name: "BackArrowIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BlogIcon`.
    var blogIcon: RswiftResources.ImageResource { .init(name: "BlogIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `BluewLightLines`.
    var bluewLightLines: RswiftResources.ImageResource { .init(name: "BluewLightLines", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `CheckedIcon`.
    var checkedIcon: RswiftResources.ImageResource { .init(name: "CheckedIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `CloseIcon`.
    var closeIcon: RswiftResources.ImageResource { .init(name: "CloseIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `DarkwLightLines`.
    var darkwLightLines: RswiftResources.ImageResource { .init(name: "DarkwLightLines", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `DeleteIcon`.
    var deleteIcon: RswiftResources.ImageResource { .init(name: "DeleteIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FolderIcon`.
    var folderIcon: RswiftResources.ImageResource { .init(name: "FolderIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FolderSaveDisabled`.
    var folderSaveDisabled: RswiftResources.ImageResource { .init(name: "FolderSaveDisabled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FolderSaveEnabled`.
    var folderSaveEnabled: RswiftResources.ImageResource { .init(name: "FolderSaveEnabled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `FoldersArrowDown`.
    var foldersArrowDown: RswiftResources.ImageResource { .init(name: "FoldersArrowDown", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `HideKeyboard`.
    var hideKeyboard: RswiftResources.ImageResource { .init(name: "HideKeyboard", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `IosSettings`.
    var iosSettings: RswiftResources.ImageResource { .init(name: "IosSettings", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LaunchContinueArrow`.
    var launchContinueArrow: RswiftResources.ImageResource { .init(name: "LaunchContinueArrow", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LaunchIcon`.
    var launchIcon: RswiftResources.ImageResource { .init(name: "LaunchIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LaunchIcon1`.
    var launchIcon1: RswiftResources.ImageResource { .init(name: "LaunchIcon1", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LaunchIcon2`.
    var launchIcon2: RswiftResources.ImageResource { .init(name: "LaunchIcon2", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LaunchIcon3`.
    var launchIcon3: RswiftResources.ImageResource { .init(name: "LaunchIcon3", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `LightwBlackLines`.
    var lightwBlackLines: RswiftResources.ImageResource { .init(name: "LightwBlackLines", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `LightwBlueLines`.
    var lightwBlueLines: RswiftResources.ImageResource { .init(name: "LightwBlueLines", path: [], bundle: bundle, locale: LocaleReference.none, onDemandResourceTags: nil) }

    /// Image `NotificationsDisabled`.
    var notificationsDisabled: RswiftResources.ImageResource { .init(name: "NotificationsDisabled", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `NotificationsIcon`.
    var notificationsIcon: RswiftResources.ImageResource { .init(name: "NotificationsIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Options`.
    var options: RswiftResources.ImageResource { .init(name: "Options", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Pensil`.
    var pensil: RswiftResources.ImageResource { .init(name: "Pensil", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PlusFolder`.
    var plusFolder: RswiftResources.ImageResource { .init(name: "PlusFolder", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `PlusIcon`.
    var plusIcon: RswiftResources.ImageResource { .init(name: "PlusIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `RateAppIcon`.
    var rateAppIcon: RswiftResources.ImageResource { .init(name: "RateAppIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ReportProblemIcon`.
    var reportProblemIcon: RswiftResources.ImageResource { .init(name: "ReportProblemIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `SettingsIcon`.
    var settingsIcon: RswiftResources.ImageResource { .init(name: "SettingsIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `Shortcuts`.
    var shortcuts: RswiftResources.ImageResource { .init(name: "Shortcuts", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `ShortcutsMini`.
    var shortcutsMini: RswiftResources.ImageResource { .init(name: "ShortcutsMini", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `TrashIcon`.
    var trashIcon: RswiftResources.ImageResource { .init(name: "TrashIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `WeReturn`.
    var weReturn: RswiftResources.ImageResource { .init(name: "WeReturn", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }

    /// Image `emptyNoutesListIcon`.
    var emptyNoutesListIcon: RswiftResources.ImageResource { .init(name: "emptyNoutesListIcon", path: [], bundle: bundle, locale: nil, onDemandResourceTags: nil) }
  }

  /// This `_R.info` struct is generated, and contains static references to 3 properties.
  struct info {
    let bundle: Foundation.Bundle
    var nsUserActivityTypes: nsUserActivityTypes { .init(bundle: bundle) }
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }
    var uiApplicationShortcutItems: uiApplicationShortcutItems { .init(bundle: bundle) }

    func nsUserActivityTypes(bundle: Foundation.Bundle) -> nsUserActivityTypes {
      .init(bundle: bundle)
    }
    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }
    func uiApplicationShortcutItems(bundle: Foundation.Bundle) -> uiApplicationShortcutItems {
      .init(bundle: bundle)
    }

    struct nsUserActivityTypes {
      let bundle: Foundation.Bundle
      var createNoteIntent: String { bundle.infoDictionaryString(path: ["NSUserActivityTypes"], key: "CreateNoteIntent") ?? "CreateNoteIntent" }
      var randomNoteIntent: String { bundle.infoDictionaryString(path: ["NSUserActivityTypes"], key: "RandomNoteIntent") ?? "RandomNoteIntent" }
    }
    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
          }
        }
      }
    }
    struct uiApplicationShortcutItems {
      let bundle: Foundation.Bundle
      var createNote: createNote { .init(bundle: bundle) }

      func createNote(bundle: Foundation.Bundle) -> createNote {
        .init(bundle: bundle)
      }

      struct createNote {
        let bundle: Foundation.Bundle
        var uiApplicationShortcutItemIconSymbolName: String { bundle.infoDictionaryString(path: ["UIApplicationShortcutItems"], key: "UIApplicationShortcutItemIconSymbolName") ?? "square.and.pencil" }
        var uiApplicationShortcutItemTitle: String { bundle.infoDictionaryString(path: ["UIApplicationShortcutItems"], key: "UIApplicationShortcutItemTitle") ?? "Новая заметка" }
        var uiApplicationShortcutItemType: String { bundle.infoDictionaryString(path: ["UIApplicationShortcutItems"], key: "UIApplicationShortcutItemType") ?? "createNote" }
      }
    }
  }

  /// This `_R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    let apsEnvironment: String = "development"
    let comAppleDeveloperIcloudContainerIdentifiers = comAppleDeveloperIcloudContainerIdentifiers()
    let comAppleDeveloperIcloudServices = comAppleDeveloperIcloudServices()
    let comAppleDeveloperSiri: Bool = true
    let comAppleDeveloperUbiquityKvstoreIdentifier: String = "$(TeamIdentifierPrefix)$(CFBundleIdentifier)"
    let comAppleSecurityApplicationGroups = comAppleSecurityApplicationGroups()
    struct comAppleDeveloperIcloudContainerIdentifiers {
      let iCloudNoterCoreDataContainer: String = "iCloud.Noter.CoreDataContainer"
    }
    struct comAppleDeveloperIcloudServices {
      let cloudKit: String = "CloudKit"
    }
    struct comAppleSecurityApplicationGroups {
      let groupNouterCoreData: String = "group.nouter.core.data"
    }
  }

  /// This `_R.font` struct is generated, and contains static references to 9 fonts.
  struct font: Sequence {
    let bundle: Foundation.Bundle

    /// Font `Inter-Black`.
    var interBlack: RswiftResources.FontResource { .init(name: "Inter-Black", bundle: bundle, filename: "Inter-Black.ttf") }

    /// Font `Inter-Bold`.
    var interBold: RswiftResources.FontResource { .init(name: "Inter-Bold", bundle: bundle, filename: "Inter-Bold.ttf") }

    /// Font `Inter-ExtraBold`.
    var interExtraBold: RswiftResources.FontResource { .init(name: "Inter-ExtraBold", bundle: bundle, filename: "Inter-ExtraBold.ttf") }

    /// Font `Inter-ExtraLight`.
    var interExtraLight: RswiftResources.FontResource { .init(name: "Inter-ExtraLight", bundle: bundle, filename: "Inter-ExtraLight.ttf") }

    /// Font `Inter-Light`.
    var interLight: RswiftResources.FontResource { .init(name: "Inter-Light", bundle: bundle, filename: "Inter-Light.ttf") }

    /// Font `Inter-Medium`.
    var interMedium: RswiftResources.FontResource { .init(name: "Inter-Medium", bundle: bundle, filename: "Inter-Medium.ttf") }

    /// Font `Inter-Regular`.
    var interRegular: RswiftResources.FontResource { .init(name: "Inter-Regular", bundle: bundle, filename: "Inter-Regular.ttf") }

    /// Font `Inter-SemiBold`.
    var interSemiBold: RswiftResources.FontResource { .init(name: "Inter-SemiBold", bundle: bundle, filename: "Inter-SemiBold.ttf") }

    /// Font `Inter-Thin`.
    var interThin: RswiftResources.FontResource { .init(name: "Inter-Thin", bundle: bundle, filename: "Inter-Thin.ttf") }

    func makeIterator() -> IndexingIterator<[RswiftResources.FontResource]> {
      [interBlack, interBold, interExtraBold, interExtraLight, interLight, interMedium, interRegular, interSemiBold, interThin].makeIterator()
    }
    func validate() throws {
      for font in self {
        if !font.canBeLoaded() { throw RswiftResources.ValidationError("[R.swift] Font '\(font.name)' could not be loaded, is '\(font.filename)' added to the UIAppFonts array in this targets Info.plist?") }
      }
    }
  }

  /// This `_R.file` struct is generated, and contains static references to 18 resource files.
  struct file {
    let bundle: Foundation.Bundle

    /// Resource file `BluewLightLines@2x.png`.
    var bluewLightLines2xPng: RswiftResources.FileResource { .init(name: "BluewLightLines@2x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `BluewLightLines@3x.png`.
    var bluewLightLines3xPng: RswiftResources.FileResource { .init(name: "BluewLightLines@3x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `DarkwLightLines@2x.png`.
    var darkwLightLines2xPng: RswiftResources.FileResource { .init(name: "DarkwLightLines@2x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `DarkwLightLines@3x.png`.
    var darkwLightLines3xPng: RswiftResources.FileResource { .init(name: "DarkwLightLines@3x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `GoogleService-Info.plist`.
    var googleServiceInfoPlist: RswiftResources.FileResource { .init(name: "GoogleService-Info", pathExtension: "plist", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Black.ttf`.
    var interBlackTtf: RswiftResources.FileResource { .init(name: "Inter-Black", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Bold.ttf`.
    var interBoldTtf: RswiftResources.FileResource { .init(name: "Inter-Bold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-ExtraBold.ttf`.
    var interExtraBoldTtf: RswiftResources.FileResource { .init(name: "Inter-ExtraBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-ExtraLight.ttf`.
    var interExtraLightTtf: RswiftResources.FileResource { .init(name: "Inter-ExtraLight", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Light.ttf`.
    var interLightTtf: RswiftResources.FileResource { .init(name: "Inter-Light", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Medium.ttf`.
    var interMediumTtf: RswiftResources.FileResource { .init(name: "Inter-Medium", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Regular.ttf`.
    var interRegularTtf: RswiftResources.FileResource { .init(name: "Inter-Regular", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-SemiBold.ttf`.
    var interSemiBoldTtf: RswiftResources.FileResource { .init(name: "Inter-SemiBold", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `Inter-Thin.ttf`.
    var interThinTtf: RswiftResources.FileResource { .init(name: "Inter-Thin", pathExtension: "ttf", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `LightwBlackLines@2x.png`.
    var lightwBlackLines2xPng: RswiftResources.FileResource { .init(name: "LightwBlackLines@2x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `LightwBlackLines@3x.png`.
    var lightwBlackLines3xPng: RswiftResources.FileResource { .init(name: "LightwBlackLines@3x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `LightwBlueLines@2x.png`.
    var lightwBlueLines2xPng: RswiftResources.FileResource { .init(name: "LightwBlueLines@2x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }

    /// Resource file `LightwBlueLines@3x.png`.
    var lightwBlueLines3xPng: RswiftResources.FileResource { .init(name: "LightwBlueLines@3x", pathExtension: "png", bundle: bundle, locale: LocaleReference.none) }
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }
  }
}
